/* Reference :-  https://www.interviewbit.com/problems/repeat-and-missing-number-array/

You are given a read only array of n integers from 1 to n.

Each integer appears exactly once except A which appears twice and B which is missing.

Return A and B.

Note: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Note that in your output A should precede B.

Example:

Input:[3 1 2 5 3] 

Output:[3, 4] 

A = 3, B = 4*/

vector<int> Solution::repeatedNumber(const vector<int> &ar) {
    vector<int> ans;
    int n = ar.size();
    
    int _xor = 0;
    
    for(int i = 0; i < n; i++) {
        _xor ^= ar[i];
    }
    
    for(int i = 1; i <= n; i++) {
        _xor ^= i;
    }
    
    int set_bit = _xor & ~(_xor-1);
    
    int a, b;
    a = b = 0;
    for(int i = 0; i < n; i++) {
        if(set_bit & ar[i])
            a ^= ar[i];
        else
            b ^= ar[i];
    }
    for(int i = 1; i <= n; i++) {
        if(set_bit & i)
            a ^= i;
        else
            b ^= i;
    }
    
    for(int i = 0; i < n ;i++) {
        if(ar[i] == b) {
            swap(a,b);
            break;
        }
    }
        
    ans.push_back(a);
    ans.push_back(b);

    return ans;
}


/* Analysis ==> Time Complexity: O(n)
                Space Complexity: O(1)
*/